#!/usr/bin/env python3

import os,sys,base64
curdir = "`pwd`" if sys.platform in ["linux", "darwin"] else "%cd%"
exec(base64.b64decode("""

""".strip()))
#https://code.visualstudio.com/api/extension-guides/tree-view
"""
https://www.soscisurvey.de/tools/view-chars.php
https://stackoverflow.com/questions/57186018/referenceerror-headers-is-not-defined-when-using-headers-in-a-server-side-ren#answer-75956506
"""

"""
https://code.visualstudio.com/api/extension-guides/tree-view

https://www.google.com/search?q=vs+code+extension+treeDataProvider+how+to+update&oq=vs+code+extension+treeDataProvider+how+to+update&aqs=chrome..69i57j33i10i160l5.5516j0j7&sourceid=chrome&ie=UTF-8
https://stackoverflow.com/questions/72312235/how-to-refresh-vscode-treedataprovider-based-treeview
https://stackoverflow.com/questions/56534723/simple-example-to-implement-vs-code-treedataprovider-with-json-data

https://code.visualstudio.com/api/extension-guides/tree-view


V Samples V
https://github.com/microsoft/vscode-extension-samples/



nonsense
https://github.com/microsoft/vscode/blob/15b8f1f9f6990d5535197ec41f0a112bf0e5dd31/src/vs/workbench/contrib/markers/common/markers.ts#L34


// https://stackoverflow.com/questions/51179496/ask-a-user-for-several-values-in-vscode-extension

tested commands
    let testedCommands = [
        'problems.action.showMultilineMessage',
        'problems.action.open',
        'workbench.actions.view.toggleProblems',
        'markers.panel.title.problems',
        'problems.action.open',
        'problems.action.openToSide',
        'problems.action.showQuickFixes',
        'workbench.action.problems.focus',
        'problems.action.copy',
        'problems.action.copyMessage',
        'problems.action.copyRelatedInformationMessage',
        'problems.action.focusProblemsFromFilter',
        'problems.action.focusFilter',
        'problems.action.showMultilineMessage',
        'problems.action.showSinglelineMessage',
        'problems.action.clearFilterText',
        'workbench.actions.view.problems',
    ];

//https://stackoverflow.com/questions/44733028/how-to-close-textdocument-in-vs-code
//CLOSING THE TEXT EDITORS - all but the test


//https://www.scaler.com/topics/javascript-nullish-coalescing-operator/

# https://www.google.com/search?q=sysctl%3A+setting+key+%22kernel.unprivileged_userns_clone%22%2C+ignoring%3A+Read-only+file+system&oq=sysctl%3A+setting+key+%22kernel.unprivileged_userns_clone%22%2C+ignoring%3A+Read-only+file+system&aqs=chrome..69i57j69i58.2737j0j4&sourceid=chrome&ie=UTF-8


https://stackoverflow.com/questions/62879698/any-tips-on-context-manager-similar-to-python-in-javascript

https://jordaneldredge.com/blog/implementing-pythons-context-manager-pattern-in-javascript/
"""

def wait(wait_for:int=2):
    import os,sys,time
    print("[",end='',flush=True)
    while wait_for>0:
        print(".",end='',flush=True)
        time.sleep(1)
        wait_for = wait_for - 1
    print("]",flush=True)

def run(cmd:str, wait_for:int=10):
    print(cmd)
    try:
        os.system(cmd)
    except Exception as e:
        print(e)
    wait(wait_for=wait_for)

def env():
	run(
        """docker run  --rm -it -v "{0}:/sync"   -p 6902:6901 --privileged --shm-size=512m -e VNC_PW=password  frantzme/dev:ui "/bin/bash echo \"sudo apt-get install -y npm && sudo npm install -g npm@latest\" >> /home/kasm-user/.bashrc && /bin/bash" """.format(curdir)
    )

def vsExtensions():
    for x in [
        "dbaeumer.vscode-eslint",
        "Gerrnperl.outline-map",
        "esbenp.prettier-vscode",
        "ms-python.vscode-pylance",
        "ms-python.python",
        "amodio.tsl-problem-matcher",
        "k--kato.intellij-idea-keybindings",
    ]:
        run("code --install-extension {0}".format(x))

def ini():
    for x in [
        "sudo apt-get update",
        "sudo apt-get --fix-missing",
        "sudo apt-get install -y python3-pip npm xz-utils",
        "wget https://nodejs.org/dist/v20.0.0/node-v20.0.0-linux-x64.tar.xz -O /tmp/node.tar.xz", #https://nodejs.org/en/download/current
        "sudo tar -C /usr/local --strip-components 1 -xJf /tmp/node.tar.xz",
        "sudo npm install -g npm@latest",
        "{0} -m pip install --upgrade mystring lsprotocol pygls astroid nox debugpy".format(sys.executable),
    ]:
        run(x)
    preppy()


def recording():
    for x in [
        "sudo apt-get update",
        "sudo apt-get install -y scrot imagemagick xdotool",
        "mkdir /tmp/xsrPrep/",
        "wget https://github.com/nonnymoose/xsr/releases/download/v1.0.0/xsr.tar.gz -O /tmp/xsrPrep/xsr.tar.gz",
        "cd /tmp/xsrPrep/ && tar xf xsr.tar.gz && sudo mv usr/bin/xsr /bin/xsr && mkdir -p /usr/share/xsr && sudo cp /tmp/xsrPrep/usr/share/xsr/Cursor.png /usr/share/xsr"

    ]:
        run(x)


def pub():
    for x in [
        "npm install -g @vscode/vsce",
        "vsce package"
    ]:
        run(x)

func_argparse_main()